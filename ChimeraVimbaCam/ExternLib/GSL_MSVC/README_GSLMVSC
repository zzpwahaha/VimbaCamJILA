from https://github.com/BrianGladman/gsl/


Building the GNU Scientific Library with Microsoft Visual Sudio
===============================================================

The GSL solution files gsl.lib.sln or gsl.dll.sln in the directory
build.vc are used to build a static library or a dynamic link 
library respectively.  The projects in these solutions are:

Utilities build:

    gsldefs    - a utility that generates GSL and CBLAS DEF files
    gslhdrs    - a utility that adds DLL import/export directives
                 to the GSL and CBLAS header files.
                 
GSL build:

    gsldll     - builds the GSL dynamic link library
    cblasdll   - builds the BLAS dynamic link library
  
    gsllib     - builds the GSL static library (multi-threaded)
    cblaslib   - builds the BLAS static library (multi-threaded)

In addition there are also a large number of test projects that
will be described later.

Step 1
------

Either the 'gsldefs' or the 'gslhdrs' project has to be built
BEFORE any GSL libraries are built. Do NOT run both --  gslhdrs
is preferred.  This step only needs to be done ONCE - after this
has been done any of the GSL library configurations can be built
without performing this step again.  

When either gslhdrs or gsldefs is built, they will then run
automatically and will copy all the GSL header files into the
gsl subdirectory within the GSL root directory.  You should now
have the following directory layout:

   gsl             - the GSL root directory
     blas       )
     block      )  - GSL subdirectories 
     bspline    )
     build.vc      - the Visual Studio build files
     ....          - more GSL subdirectories 
     gsl           - should now contain the GSL header files
     ....

What the gslhdrs and gsldefs programs do is described in NOTES below.

Step 2a - Building the Static Library
-------------------------------------

At this point the two library projects can be built. The resulting
libraries are placed in appropriate subdirectories within the
gsl root directory as follows:

  gsl
    lib
      win32
        release
        debug
      x64
        release
        debug

Step 2b - Building the Dynamic Link Library (DLL)
-------------------------------------------------

The VC++ DLL build projects can be built as required.  The resulting
DLLs and libraries are placed in appropriate subdirectories within 
the gsl root directory:

  gsl
    dll
      win32
        release
        debug
      x64
        release
        debug

Step 3 - Testing
----------------

The GSL solution files test.gsl.lib.sln or test.gsl.dll.sln can be used
to test the GSL static or DLL libraries.  The configuration set for these
projects has to be the same as that used to build the GSL libraries.
 
Each of the test projects runs and puts its output in the appropriate
subdirectory ('lib' for static libraries, 'dll' for DLL libraries):

  gsl
    <lib|dll>
      win32
        release
        debug
      x64
        release
        debug
 
as a name.out file where 'name' indicates the test in question. These 
output files will contain failure messages if there are any problems.

If you have Python installed you can also run the static library or the
DLL tests (after the tests have been built) by running the programs 
run_tests.py found in the libtests and dlltests directories respectively.   

NOTES
=====

GSLHDRS
-------

The gslhdrs.exe executable collects all the headers into the gsl 
sub-directory in a modified form:

  (a) it adds the symbols GSL_FUN (for gsl functions) or CBL_FUN 
      (for cblas functions) before each GSL or CBLAS function 
      definition;
      
  (b) it then inserts the following text into each header so that
      so that the symbols GSL_FUN and CBL_FUN can be used to 
      declare GSL and CBLAS symbols for static library, DLL import 
      or DLL export depending on what is being built at the time.

In GSL headers:

#if !defined( GSL_FUN )
#  if !defined( GSL_DLL )
#    define GSL_FUN extern
#  elif defined( BUILD_GSL_DLL )
#    define GSL_FUN extern __declspec(dllexport)
#  else
#    define GSL_FUN extern __declspec(dllimport)
#  endif
#endif

In CBLAs headers (gsl_cblas.h):

#if !defined( CBL_FUN )
#  if !defined( CBLAS_DLL )
#    define CBL_FUN extern
#  elif defined( BUILD_CBLAS_DLL )
#    define CBL_FUN extern __declspec(dllexport)
#  else
#    define CBL_FUN extern __declspec(dllimport)
#  endif
#endif

GSLDEFS
-------

The project gsldefs can be used as an ALTERNATIVE to gslhdrs. This 
copies the header files as before but then creates DEF files that 
can be added to the DLL projects to create the exports needed. This
avoids the need to modify the header files. If this approach is
used the DEF files gsl.def and cblas.def need to be added to the 
respective DLL projects manually as the default build approach is 
based on the use of gslhdrs.

The DLL projects can be built using either method but the method using 
gslhdrs allows the direct import of DLL symbols and direct static and
dynamic linking.

GSL Use in Windows Applications
-------------------------------

The GSL and CBLAS static libraries can be used in a straightforward way 
with Windows Applications. These are multi threaded since single threaded 
libraries are no longer available for VC++.

The GSL and CBLAS DLLs are fairly easy to use but there are a few issues to 
watch out for.  Firstly the application must be able to locate the DLLs so 
they must be on the DLL search path or in the same directory as the 
application. Secondly it is necessary to link to the lib files in the dll 
folder rather than those in the lib folder. Thirdly GSL_DLL must be defined 
to tell the application that a DLL is being used.

The GSL build projects create GSL with range checking turned off. If you
want it turned on you should add the symbol GSL_RANGE_CHECK to the lists
of pre-processor defines in the cbaslib and gsllib build projects.  

   Brian Gladman, Worcester UK, April 2017
